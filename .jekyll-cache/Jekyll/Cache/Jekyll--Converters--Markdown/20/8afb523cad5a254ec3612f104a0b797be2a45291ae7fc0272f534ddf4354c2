I"M<p>这是UnityChan技术探究系列的第二弹，第一篇介绍了UnityChan中的舞台灯光跟随音乐节奏的实现方法以及音乐可视化的概念，这一篇主要会拆解UnityChan这个项目中，中央舞台的一些效果的实现方式。</p>

<h3 id="舞台效果">舞台效果</h3>
<p>UnityChan中，有一个非常酷炫的中央舞台，unity酱就是在上面表演的，这个舞台有很多效果：类似于玻璃材质的反射、漩涡形状的发光特效、六边形网格状向外扩散的脉冲，等等。<br />
起初我以为中间的发光特效是一团粒子特效，但是看了他的代码之后发现并不是，中间的网格脉冲和漩涡都是通过Shader来实现的，这就引起了我的好奇。<br />
<img src="https://s2.ax1x.com/2019/11/30/QZFyDJ.md.gif" alt="QZFyDJ.md.gif" /></p>

<h3 id="镜面反射效果的实现">镜面反射效果的实现</h3>
<p><img src="https://s2.ax1x.com/2019/11/30/QZkGRK.png" alt="QZkGRK.png" /><br />
仔细观察这张图片，可以看到人物脚下的舞台像是一面镜子，反射出场景与人物。<br />
看到这个效果，第一反应这是shader做的，于是去看舞台上的材质，发现它是用了一张程序生成的纹理。<br />
<img src="https://s2.ax1x.com/2019/12/01/QZLXrV.png" alt="QZLXrV.png" /><br />
这张纹理由一个专门渲染镜面反射的相机实时渲染。<br />
<img src="https://s2.ax1x.com/2019/12/01/QZXfAS.png" alt="QZXfAS.png" /><br />
动态创建这个相机的代码如下：</p>
<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="n">GameObject</span> <span class="n">go</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">GameObject</span><span class="p">(</span><span class="s">"Mirror Refl Camera id"</span> <span class="p">+</span> <span class="nf">GetInstanceID</span><span class="p">()</span> <span class="p">+</span> <span class="s">" for "</span> <span class="p">+</span> <span class="n">currentCamera</span><span class="p">.</span><span class="nf">GetInstanceID</span><span class="p">(),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">Camera</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">Skybox</span><span class="p">));</span>
<span class="n">reflectionCamera</span> <span class="p">=</span> <span class="n">go</span><span class="p">.</span><span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">Camera</span><span class="p">&gt;();</span>
<span class="n">reflectionCamera</span><span class="p">.</span><span class="n">enabled</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
<span class="n">reflectionCamera</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span> <span class="p">=</span> <span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">;</span>
<span class="n">reflectionCamera</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">rotation</span> <span class="p">=</span> <span class="n">transform</span><span class="p">.</span><span class="n">rotation</span><span class="p">;</span>
<span class="n">reflectionCamera</span><span class="p">.</span><span class="n">gameObject</span><span class="p">.</span><span class="n">AddComponent</span><span class="p">&lt;</span><span class="n">FlareLayer</span><span class="p">&gt;();</span>
<span class="n">go</span><span class="p">.</span><span class="n">hideFlags</span> <span class="p">=</span> <span class="n">HideFlags</span><span class="p">.</span><span class="n">HideAndDontSave</span><span class="p">;</span>       <span class="c1">//隐藏相机</span>
<span class="n">m_ReflectionCameras</span><span class="p">[</span><span class="n">currentCamera</span><span class="p">]</span> <span class="p">=</span> <span class="n">reflectionCamera</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>然后为这个相机设置targetTexture，将它“看”到的东西渲染到纹理之中：</p>
<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1">// Setup oblique projection matrix so that near plane is our reflection</span>
<span class="c1">// plane. This way we clip everything below/above it for free.</span>
<span class="n">Vector4</span> <span class="n">clipPlane</span> <span class="p">=</span> <span class="nf">CameraSpacePlane</span><span class="p">(</span><span class="n">reflectionCamera</span><span class="p">,</span> <span class="n">pos</span><span class="p">,</span> <span class="n">normal</span><span class="p">,</span> <span class="m">1.0f</span><span class="p">);</span>
<span class="n">Matrix4x4</span> <span class="n">projection</span> <span class="p">=</span> <span class="n">cam</span><span class="p">.</span><span class="n">projectionMatrix</span><span class="p">;</span>
<span class="nf">CalculateObliqueMatrix</span><span class="p">(</span><span class="k">ref</span> <span class="n">projection</span><span class="p">,</span> <span class="n">clipPlane</span><span class="p">);</span>
<span class="n">reflectionCamera</span><span class="p">.</span><span class="n">projectionMatrix</span> <span class="p">=</span> <span class="n">projection</span><span class="p">;</span>
<span class="n">reflectionCamera</span><span class="p">.</span><span class="n">cullingMask</span> <span class="p">=</span> <span class="p">~(</span><span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="m">4</span><span class="p">)</span> <span class="p">&amp;</span> <span class="n">m_ReflectLayers</span><span class="p">.</span><span class="k">value</span><span class="p">;</span> <span class="c1">// never render water layer</span>
<span class="n">reflectionCamera</span><span class="p">.</span><span class="n">targetTexture</span> <span class="p">=</span> <span class="n">m_ReflectionTexture</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>除此之外，还需要渲染一张深度图。深度图的生成是在CopyDepth.shader中。<br />
有了这两张纹理，接下来要做的就是在舞台材质的shader中对纹理进行采样，但是为了使效果更佳理想，需要对采样得到的颜色进行一定的处理，比如，通过参数来控制镜面反射的强度，以及通过深度图来实现反射效果随深度渐隐或模糊的效果：</p>
<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">o</span><span class="p">.</span><span class="n">Emission</span> <span class="p">+=</span> <span class="n">refcolor</span> <span class="p">*</span> <span class="n">_ReflectionStrength</span> <span class="p">*</span> <span class="n">fade_by_depth</span> <span class="p">*</span> <span class="p">(</span><span class="m">1.0</span><span class="p">-</span><span class="n">grid</span><span class="p">*</span><span class="m">0.9</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="漩涡特效的实现">漩涡特效的实现</h3>
<p>其实这个效果的实现原理并不难，但是想要呈现出很好的效果，就需要强大的设计能力和数学能力，因为需要把数学公式变成图形输出。 <br />
<a href="https://imgse.com/i/QmGzVA"><img src="https://s2.ax1x.com/2019/12/01/QmGzVA.md.png" alt="QmGzVA.md.png" /></a><br />
这里的旋涡主要是根据时间（Time），以及采样点到中心点的距离，实时计算采样点的颜色，具体实现代码如下：</p>
<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="kt">float</span> <span class="nf">Rings</span><span class="p">(</span><span class="n">float3</span> <span class="n">pos</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">float</span> <span class="n">pi</span> <span class="p">=</span> <span class="m">3.14159</span><span class="p">;</span>
    <span class="n">float2</span> <span class="n">wpos</span> <span class="p">=</span> <span class="n">pos</span><span class="p">.</span><span class="n">xz</span><span class="p">;</span>

    <span class="kt">float</span> <span class="n">stride</span> <span class="p">=</span> <span class="n">_RingSrtide</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">strine_half</span> <span class="p">=</span> <span class="n">stride</span> <span class="p">*</span> <span class="m">0.5</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">thickness</span> <span class="p">=</span> <span class="m">1.0</span> <span class="p">-</span> <span class="p">(</span><span class="n">_RingThicknessMin</span> <span class="p">+</span> <span class="nf">length</span><span class="p">(</span><span class="n">_Spectra</span><span class="p">)*(</span><span class="n">_RingThicknessMax</span><span class="p">-</span><span class="n">_RingThicknessMin</span><span class="p">));</span>
    <span class="kt">float</span> <span class="n">distance</span> <span class="p">=</span> <span class="nf">abs</span><span class="p">(</span><span class="nf">length</span><span class="p">(</span><span class="n">wpos</span><span class="p">)</span> <span class="p">-</span> <span class="n">_Time</span><span class="p">.</span><span class="n">y</span><span class="p">*</span><span class="m">0.1</span><span class="p">);</span>
    <span class="kt">float</span> <span class="n">fra</span> <span class="p">=</span> <span class="nf">_gl_mod</span><span class="p">(</span><span class="n">distance</span><span class="p">,</span> <span class="n">stride</span><span class="p">);</span>
    <span class="kt">float</span> <span class="n">cycle</span> <span class="p">=</span> <span class="nf">floor</span><span class="p">((</span><span class="n">distance</span><span class="p">)/</span><span class="n">stride</span><span class="p">);</span>

    <span class="kt">float</span> <span class="n">c</span> <span class="p">=</span> <span class="n">strine_half</span> <span class="p">-</span> <span class="nf">abs</span><span class="p">(</span><span class="n">fra</span><span class="p">-</span><span class="n">strine_half</span><span class="p">)</span> <span class="p">-</span> <span class="n">strine_half</span><span class="p">*</span><span class="n">thickness</span><span class="p">;</span>
    <span class="n">c</span> <span class="p">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">c</span> <span class="p">*</span> <span class="p">(</span><span class="m">1.0</span><span class="p">/(</span><span class="n">strine_half</span><span class="p">*</span><span class="n">thickness</span><span class="p">)),</span> <span class="m">0.0</span><span class="p">);</span>

    <span class="kt">float</span> <span class="n">rs</span> <span class="p">=</span> <span class="nf">iq_rand</span><span class="p">(</span><span class="n">cycle</span><span class="p">*</span><span class="n">cycle</span><span class="p">);</span>
    <span class="kt">float</span> <span class="n">r</span> <span class="p">=</span> <span class="nf">iq_rand</span><span class="p">(</span><span class="n">cycle</span><span class="p">)</span> <span class="p">+</span> <span class="n">_Time</span><span class="p">.</span><span class="n">y</span><span class="p">*(</span><span class="n">_RingSpeedMin</span><span class="p">+(</span><span class="n">_RingSpeedMax</span><span class="p">-</span><span class="n">_RingSpeedMin</span><span class="p">)*</span><span class="n">rs</span><span class="p">);</span>

    <span class="kt">float</span> <span class="n">angle</span> <span class="p">=</span> <span class="nf">atan2</span><span class="p">(</span><span class="n">wpos</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">wpos</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="p">/</span> <span class="n">pi</span> <span class="p">*</span><span class="m">0.5</span> <span class="p">+</span> <span class="m">0.5</span><span class="p">;</span> <span class="c1">// 0.0-1.0</span>
    <span class="kt">float</span> <span class="n">a</span> <span class="p">=</span> <span class="m">1.0</span><span class="p">-</span><span class="nf">_gl_mod</span><span class="p">(</span><span class="n">angle</span> <span class="p">+</span> <span class="n">r</span><span class="p">,</span> <span class="m">1.0</span><span class="p">);</span>
    <span class="n">a</span> <span class="p">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">a</span><span class="p">-</span><span class="m">0.7</span><span class="p">,</span> <span class="m">0.0</span><span class="p">)</span> <span class="p">*</span> <span class="n">c</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="六边形网格脉冲的实现">六边形网格脉冲的实现</h3>
<p><a href="https://imgse.com/i/QmJSUI"><img src="https://s2.ax1x.com/2019/12/01/QmJSUI.md.png" alt="QmJSUI.md.png" /></a><br />
相对于旋涡特效，这个效果的实现要稍稍复杂一点。<br />
首先，需要画出每个六边形网格：</p>
<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kt">float</span> <span class="nf">HexGrid</span><span class="p">(</span><span class="n">float3</span> <span class="n">p</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">float</span> <span class="n">scale</span> <span class="p">=</span> <span class="m">1.2</span><span class="p">;</span>
    <span class="n">float2</span> <span class="n">grid</span> <span class="p">=</span> <span class="nf">float2</span><span class="p">(</span><span class="m">0.692</span><span class="p">,</span> <span class="m">0.4</span><span class="p">)</span> <span class="p">*</span> <span class="n">scale</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">radius</span> <span class="p">=</span> <span class="m">0.22</span> <span class="p">*</span> <span class="n">scale</span><span class="p">;</span>

    <span class="n">float2</span> <span class="n">p1</span> <span class="p">=</span> <span class="nf">_gl_mod</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">xz</span><span class="p">,</span> <span class="n">grid</span><span class="p">)</span> <span class="p">-</span> <span class="n">grid</span><span class="p">*</span><span class="m">0.5</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">c1</span> <span class="p">=</span> <span class="nf">Hex</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span> <span class="n">radius</span><span class="p">);</span>

    <span class="n">float2</span> <span class="n">p2</span> <span class="p">=</span> <span class="nf">_gl_mod</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">xz</span><span class="p">+</span><span class="n">grid</span><span class="p">*</span><span class="m">0.5</span><span class="p">,</span> <span class="n">grid</span><span class="p">)</span> <span class="p">-</span> <span class="n">grid</span><span class="p">*</span><span class="m">0.5</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">c2</span> <span class="p">=</span> <span class="nf">Hex</span><span class="p">(</span><span class="n">p2</span><span class="p">,</span> <span class="n">radius</span><span class="p">);</span>
    <span class="k">return</span> <span class="nf">min</span><span class="p">(</span><span class="n">c1</span><span class="p">,</span> <span class="n">c2</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>然后根据时间Time来计算脉冲的内圈半径和外圈半径：</p>
<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kt">float</span> <span class="nf">Circle</span><span class="p">(</span><span class="n">float3</span> <span class="n">pos</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">float</span> <span class="n">o_radius</span> <span class="p">=</span> <span class="m">5.0</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">i_radius</span> <span class="p">=</span> <span class="m">4.0</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">d</span> <span class="p">=</span> <span class="nf">length</span><span class="p">(</span><span class="n">pos</span><span class="p">.</span><span class="n">xz</span><span class="p">);</span>
    <span class="kt">float</span> <span class="n">c</span> <span class="p">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">o_radius</span><span class="p">-(</span><span class="n">o_radius</span><span class="p">-</span><span class="nf">_gl_mod</span><span class="p">(</span><span class="n">d</span><span class="p">-</span><span class="n">_Time</span><span class="p">.</span><span class="n">y</span><span class="p">*</span><span class="m">1.5</span><span class="p">,</span> <span class="n">o_radius</span><span class="p">))-</span><span class="n">i_radius</span><span class="p">,</span> <span class="m">0.0</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>并高亮这个区间内的所有纹素：</p>
<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">o</span><span class="p">.</span><span class="n">Albedo</span> <span class="p">+=</span> <span class="n">_GridColor</span> <span class="p">*</span> <span class="n">grid</span> <span class="p">*</span> <span class="m">0.1</span><span class="p">;</span>
<span class="n">o</span><span class="p">.</span><span class="n">Emission</span> <span class="p">+=</span> <span class="n">_GridColor</span> <span class="p">*</span> <span class="p">(</span><span class="n">grid</span> <span class="p">*</span> <span class="n">circle</span><span class="p">)</span> <span class="p">*</span> <span class="n">_GridEmission</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET